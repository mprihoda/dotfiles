set nocompatible
filetype off

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'

" dockerfile syntax highlighting
Plugin 'honza/dockerfile.vim'

Plugin 'majutsushi/tagbar'
" File tree
Plugin 'scrooloose/nerdtree'
" Fuzzy file/mru/buffer search
Plugin 'kien/ctrlp.vim'
" Git support
Plugin 'tpope/vim-fugitive'
" Surround with / select between plugin
Plugin 'tpope/vim-surround'
" Status bar plugin
Plugin 'bling/vim-airline'
" Dash support
Plugin 'rizzatti/dash.vim'

Plugin 'davidoc/taskpaper.vim'

" Color schemes
Plugin 'flazz/vim-colorschemes'
Plugin 'chriskempson/base16-vim'

" Language-specific
" Javascript
Plugin 'jelera/vim-javascript-syntax'
Plugin 'pangloss/vim-javascript'
Plugin 'marijnh/tern_for_vim'

" Indentation help
Plugin 'nathanaelkane/vim-indent-guides'

" Bracket and other delimiters automatic closing
Plugin 'Raimondi/delimitMate'

" Syntax checker
Plugin 'scrooloose/syntastic'

" Completion
Plugin 'Valloric/YouCompleteMe'

" Search
Plugin 'mileszs/ack.vim'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on     " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line

"============================================================================
" Make :help appear in a full-screen tab, instead of a window
"============================================================================

    "Only apply to .txt files...
    augroup HelpInTabs
        autocmd!
        autocmd BufEnter  *.txt   call HelpInNewTab()
    augroup END

    "Only apply to help files...
    function! HelpInNewTab ()
        if &buftype == 'help'
            "Convert the help window to a tab...
            execute "normal \<C-W>T"
        endif
    endfunction

"============================================================================
" Allow deletes in Insert mode to keep deleting past the insertion point
"============================================================================

    set backspace=indent,eol,start

"============================================================================
" Turn on case-insensitive matches (but only when pattern is all-lowercase)
"============================================================================

    set ignorecase smartcase


"============================================================================
" Make searches look-ahead as you type
"============================================================================

    set incsearch


"============================================================================
" Make successful searches highlight all possible matches
"============================================================================

    set hlsearch

"============================================================================
" Make delete key in Normal mode remove the persistently highlighted matches
"============================================================================

    nmap <silent>  <BS>  :nohlsearch<CR>

"============================================================================
" When completing, show all options, insert common prefix, then iterate
"============================================================================

    set wildmode=list:longest,full

"============================================================================
" Make shift operations in Visual mode stay in Visual mode afterwards
"============================================================================

"    vmap <expr> > ShiftAndKeepVisualSelection(">")
"    vmap <expr> < ShiftAndKeepVisualSelection("<")
"
"    function! ShiftAndKeepVisualSelection(cmd, mode)
"        set nosmartindent
"        if mode() =~ '[Vv]'
"            return a:cmd . ":set smartindent\<CR>gv"
"        else
"            return a:cmd . ":set smartindent\<CR>"
"        endif
"    endfunction

" keep always a few lines above/below cursor to see some context
set scrolloff=7

" show ruler
set ruler

" Don't redraw while executing macros (good performance config)
set lazyredraw

" For regular expressions turn magic on
set magic

" Show matching brackets when text indicator is over them
set showmatch
" How many tenths of a second to blink when matching brackets
set mat=2

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Colors and Fonts
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Enable syntax highlighting
syntax enable

set background=dark

" Set utf8 as standard encoding and en_US as the standard language
set encoding=utf8

" Use Unix as the standard file type
set ffs=unix,dos,mac

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Files, backups and undo
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Turn backup off, since most stuff is in SVN, git et.c anyway...
set nobackup
set nowb
set noswapfile

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Text, tab and indent related
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Use spaces instead of tabs
set expandtab

" Be smart when using tabs ;)
set smarttab

" 1 tab == 4 spaces
set shiftwidth=4
set tabstop=4

" Linebreak on 500 characters
set lbr
set tw=500

set ai "Auto indent
set si "Smart indent
set wrap "Wrap lines

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Turn persistent undo on
"    means that you can undo even when you close a buffer/VIM
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
try
    set undodir=~/.vim_runtime/temp_dirs/undodir
    set undofile
    set undolevels=5000
catch
endtry

""""""""""""""""""""""""""""""
" => Status line
""""""""""""""""""""""""""""""
" Always show the status line
set laststatus=2

" NERDTree
noremap <silent> <D-1> :NERDTreeToggle<CR>
noremap <silent> <Leader>1 :NERDTreeToggle<CR>

" Tagbar
noremap <silent> <D-7> :TagbarToggle<CR>
noremap <silent> <Leader>7 :TagbarToggle<CR>

colorscheme solarized

" Syntastic
    set statusline+=%#warningmsg#
    set statusline+=%{SyntasticStatuslineFlag()}
    set statusline+=%*

    let g:syntastic_always_populate_loc_list = 1
    let g:syntastic_auto_loc_list = 1
    let g:syntastic_check_on_open = 1
    let g:syntastic_check_on_wq = 0

" Do not limit ctrlp max files
let g:ctrlp_max_files=0

" Taskpaper settings
function! s:taskpaper_setup()
" Your settings
nnoremap <buffer> <silent> <Leader>tn
\    :<C-u>call taskpaper#toggle_tag('next', '')<CR>
endfunction

augroup vimrc-taskpaper
autocmd!
autocmd FileType taskpaper call s:taskpaper_setup()
augroup END


