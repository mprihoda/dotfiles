set nocompatible
filetype off

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'

" dockerfile syntax highlighting
Plugin 'honza/dockerfile.vim'

" Gettext translation files
Plugin 'po.vim'

Plugin 'majutsushi/tagbar'
" File tree
Plugin 'scrooloose/nerdtree'
" Fuzzy file/mru/buffer search
Plugin 'kien/ctrlp.vim'
" Git support
Plugin 'tpope/vim-fugitive'
Plugin 'airblade/vim-gitgutter'

" Surround with / select between plugin
Plugin 'tpope/vim-surround'
" Status bar plugin
Plugin 'bling/vim-airline'
" Dash support
Plugin 'rizzatti/dash.vim'

" Search about everything
Plugin 'Shougo/unite.vim'

Plugin 'davidoc/taskpaper.vim'

" Color schemes
Plugin 'flazz/vim-colorschemes'
Plugin 'chriskempson/base16-vim'

" Indentation help
Plugin 'nathanaelkane/vim-indent-guides'

" Bracket and other delimiters automatic closing
Plugin 'Raimondi/delimitMate'

" Debugger
Plugin 'joonty/vdebug'

" Syntax checker
Plugin 'scrooloose/syntastic'

" Completion
Plugin 'Valloric/YouCompleteMe'

" Search
Plugin 'mileszs/ack.vim'

"Distraction-free editation
Plugin 'junegunn/goyo.vim'
Plugin 'junegunn/limelight.vim'

Plugin 'aklt/plantuml-syntax'

Plugin 'SirVer/ultisnips'

" HTML
Plugin 'othree/html5.vim'
Plugin 'mattn/emmet-vim'

"CSS
Plugin 'groenewege/vim-less'

" Scala
Plugin 'derekwyatt/vim-scala'
Plugin 'file:///Users/mph/Devel/forked/sbt-quickfix', {'rtp': 'src/main/resources/vim-sbt/'}

" Play
Plugin 'gre/play2vim'

" Javascript
Plugin 'jelera/vim-javascript-syntax'
Plugin 'pangloss/vim-javascript'
Plugin 'mxw/vim-jsx'
Plugin 'marijnh/tern_for_vim'

" PHP
Plugin 'vim-php/tagbar-phpctags.vim'

" Objective-C
Plugin 'b4winckler/vim-objc'

" Mustache
Plugin 'mustache/vim-mustache-handlebars'

" Evernote plugin
Plugin 'neilagabriel/vim-geeknote'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on     " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line

"============================================================================
" Make :help appear in a full-screen tab, instead of a window
"============================================================================

    "Only apply to .txt files...
"    augroup HelpInTabs
"        autocmd!
"        autocmd BufEnter  *.txt   call HelpInNewTab()
"    augroup END
"
"    "Only apply to help files...
"    function! HelpInNewTab ()
"        if &buftype == 'help'
"            "Convert the help window to a tab...
"            execute "normal \<C-W>T"
"        endif
"    endfunction

"============================================================================
" Allow deletes in Insert mode to keep deleting past the insertion point
"============================================================================

    set backspace=indent,eol,start

"============================================================================
" Turn on case-insensitive matches (but only when pattern is all-lowercase)
"============================================================================

    set ignorecase smartcase


"============================================================================
" Make searches look-ahead as you type
"============================================================================

    set incsearch


"============================================================================
" Make successful searches highlight all possible matches
"============================================================================

    set hlsearch

"============================================================================
" Make delete key in Normal mode remove the persistently highlighted matches
"============================================================================

    nmap <silent>  <BS>  :nohlsearch<CR>

"============================================================================
" When completing, show all options, insert common prefix, then iterate
"============================================================================

    set wildmode=list:longest,full

"============================================================================
" Make shift operations in Visual mode stay in Visual mode afterwards
"============================================================================

"    vmap <expr> > ShiftAndKeepVisualSelection(">")
"    vmap <expr> < ShiftAndKeepVisualSelection("<")
"
"    function! ShiftAndKeepVisualSelection(cmd, mode)
"        set nosmartindent
"        if mode() =~ '[Vv]'
"            return a:cmd . ":set smartindent\<CR>gv"
"        else
"            return a:cmd . ":set smartindent\<CR>"
"        endif
"    endfunction

" keep always a few lines above/below cursor to see some context
set scrolloff=7

" show ruler
set ruler

" Don't redraw while executing macros (good performance config)
set lazyredraw

" For regular expressions turn magic on
set magic

" Show matching brackets when text indicator is over them
set showmatch
" How many tenths of a second to blink when matching brackets
set mat=2

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Colors and Fonts
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Enable syntax highlighting
syntax enable

set background=dark

" Set utf8 as standard encoding and en_US as the standard language
set encoding=utf8

" Use Unix as the standard file type
set ffs=unix,dos,mac

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Files, backups and undo
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Turn backup off, since most stuff is in SVN, git et.c anyway...
set nobackup
set nowb
set noswapfile

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Text, tab and indent related
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Use spaces instead of tabs
set expandtab

" Be smart when using tabs ;)
set smarttab

" 1 tab == 4 spaces
set shiftwidth=4
set tabstop=4

" Linebreak on 500 characters
set lbr
set tw=500

set ai "Auto indent
set si "Smart indent
set wrap "Wrap lines

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Turn persistent undo on
"    means that you can undo even when you close a buffer/VIM
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
try
    set undodir=~/.vim_runtime/temp_dirs/undodir
    set undofile
    set undolevels=5000
catch
endtry

""""""""""""""""""""""""""""""
" => Status line
""""""""""""""""""""""""""""""
" Always show the status line
set laststatus=2

" NERDTree
noremap <silent> <D-1> :NERDTreeToggle<CR>
noremap <silent> <Leader>1 :NERDTreeToggle<CR>
noremap <silent> <Leader>ff :NERDTreeFind<CR>

" Tagbar
noremap <silent> <D-7> :TagbarToggle<CR>
noremap <silent> <Leader>7 :TagbarToggle<CR>

colorscheme solarized

" Syntastic
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0

" Do not limit ctrlp max files
let g:ctrlp_max_files=40000

" Map ctrlp for file, buffer and mru search
map <silent> <Leader>t <C-p>
map <silent> <Leader>y :CtrlPBuffer<CR>
map <silent> <Leader>e :CtrlPMRU<CR>

" Taskpaper settings
function! s:taskpaper_setup()
" Your settings
nnoremap <buffer> <silent> <Leader>tn
\    :<C-u>call taskpaper#toggle_tag('next', '')<CR>
endfunction

augroup vimrc-taskpaper
autocmd!
autocmd FileType taskpaper call s:taskpaper_setup()
augroup END

" Eclim settings
let g:EclimCompletionMethod = 'omnifunc'

set exrc
set secure

" Dash settings

nmap <silent> <Leader>d <Plug>DashSearch

" Set czech utf-8 keymap
set keymap=czech_utf-8
" Set the iminsert back to 0 after setting the keymap, so that US keyboard is default
" Can be switched with C-^
set iminsert=0
" Use the same flag for search pattern keymap as for insert mode, otherwise they would be separate
set imsearch=-1

" Use markdown format for plain text files
augroup markdown
    autocmd!
    autocmd BufEnter,BufRead *.txt,*.md,*.text,*.markdown set filetype=markdown
    autocmd FileType markdown nmap <buffer> <Leader>p :!open -a Marked\ 2 "%"<CR>
augroup END

" Remap ultisnips
let g:UltiSnipsExpandTrigger="<c-y>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>""

" Auto save when moving to another buffer, calling make etc.
set autowrite

" Set silent make on F5
nnoremap <Leader>m :silent make<CR>
inoremap <Leader>m <Esc>:silent make<CR>
vnoremap <Leader>m :<C-U>:silent make<CR>

" Allow line numbers
set number

" Enable jsx checking using jsxhint
" Use 'npm install -g jsxhint' to install
let g:syntastic_javascript_checkers = ['jsxhint']

" SBT quickfix
let g:quickfix_load_mapping="<Leader>0"
let g:quickfix_next_mapping=""

" Copy to clipboard also (unnamed would work for macvim, unnamedplus works with X-11 vim on MacOS)
set clipboard^=unnamedplus
